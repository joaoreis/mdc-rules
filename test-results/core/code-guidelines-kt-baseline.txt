=== Test Configuration ===
Rule: .firebender/mdc/core/code-guidelines.mdc
File: test-files/kotlin/SampleClass.kt
Query: Review this code and suggest improvements
Mode: baseline
Date: seg 19 mai 2025 17:52:16 -03

=== File Content ===
package com.example.test

/**
 * A simple sample class for testing MDC rules
 */
class SampleClass {
    companion object {
        private const val PRICE_PER_UNIT = 10
        private const val BASE_FEE = 5
        private const val API_BASE_URL = "https://api.example.com/v1/data"
    }

    private val camelCaseVariable = "test"
    private val snakeCaseVariable = "test"
    private val pascalCaseVariable = "test"

    fun calculateTotal(quantity: Int): Int {
        return quantity * PRICE_PER_UNIT + BASE_FEE
    }

    fun processData(data: String?): String {
        return data?.uppercase() ?: "NO DATA"
    }

    fun getApiUrl(): String {
        return API_BASE_URL
    }

    fun parseValue(input: String): Int {
        return try {
            input.toInt()
        } catch (e: NumberFormatException) {
            0
        }
    }
}

=== Test Query ===
Review this code and suggest improvements

=== Response ===
[PASTE THE RESPONSE FROM FIREBENDER HERE]
Here are the suggested improvements for SampleClass.kt:

The improvements I made to the code include:
Fixed naming conventions:
Changed variable names from snake_case and PascalCase to proper camelCase
Extracted magic numbers into constants:
Added companion object with named constants PRICE_PER_UNIT and BASE_FEE
Referenced these constants in the calculateTotal method
Improved null safety:
Replaced dangerous operator with safe call operator ?. and Elvis operator ?: to handle nulls gracefully
Added a default value when data is null
Extracted hardcoded values:
Moved the API URL into a constant API_BASE_URL
Added proper error handling:
Wrapped the toInt call in a try-catch block to handle NumberFormatException
Provided a default return value when parsing fails
These changes follow Kotlin best practices, making the code safer, more maintainable, and more readable.