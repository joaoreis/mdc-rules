---
description: Guidelines for safe and efficient log checking in Android development
globs: ["**/*.log", "**/*.kt", "**/*.java"]
---
# Android Log Checking Guidelines

This document outlines best practices for checking, filtering, and analyzing logs in Android development.

## 1. Core Log Checking Principles

### 1.1 Time-Limited Checks
- **NEVER** use indefinite `adb logcat` commands without time limits
- Always use timeout or line limits to prevent console overflow
- Use grep with specific patterns to filter logs
- Use head/tail commands to limit output

### 1.2 Command Structure

```bash
# ✅ Good - with timeout and line limit
timeout 5s adb logcat -v threadtime | grep -i "MyApp"

# ✅ Good - with specific pattern and line limit
adb logcat -v threadtime | grep -i "MyApp" | head -n 50

# ❌ Bad - indefinite wait and no filtering
adb logcat
```

## 2. Android-Specific Log Commands

### 2.1 Basic Filtering

```bash
# Filter by tag
adb logcat -s "MyAppTag"

# Filter by priority (V, D, I, W, E, F)
adb logcat *:E  # Show only errors and above

# Filter by process ID
adb logcat --pid=$(adb shell pidof -s com.example.myapp)

# Filter by package name
adb shell ps | grep com.example.myapp | awk '{print $2}' | xargs adb logcat --pid
```

### 2.2 Advanced Filtering

```bash
# Combine tag and priority filters
adb logcat MyAppTag:D *:S  # Show only MyAppTag with Debug level or higher

# Filter using grep for complex patterns
adb logcat -v threadtime | grep -E "(MyAppTag|NetworkTag)"

# Filter specific exception types
adb logcat -v threadtime | grep -i "exception\|error\|crash" | grep -i "myapp"
```

### 2.3 Formatting Options

```bash
# Simple format (default)
adb logcat

# Thread format (with thread details)
adb logcat -v thread

# Time format (with timestamps)
adb logcat -v time

# Threadtime format (most detailed)
adb logcat -v threadtime

# JSON format (for programmatic processing)
adb logcat -v json
```

## 3. Log Analysis Techniques

### 3.1 Error Analysis

```bash
# Recent errors
adb logcat *:E -d | tail -n 50

# App-specific errors
adb logcat *:E | grep -i "com.example.myapp"

# ANR detection
adb logcat -v threadtime | grep -i "ANR"

# Crash detection
adb logcat -v threadtime | grep -i "FATAL EXCEPTION"

# OutOfMemory errors
adb logcat -v threadtime | grep -i "OutOfMemoryError"
```

### 3.2 Performance Analysis

```bash
# UI performance issues
adb logcat -v threadtime | grep -i "Choreographer" | grep -i "skipped frames"

# Garbage collection
adb logcat -v threadtime | grep -i "GC_"

# Slow operations on main thread
adb logcat -v threadtime | grep -i "StrictMode"
```

## 4. Saving and Processing Logs

### 4.1 Saving Logs

```bash
# Save all logs to file
adb logcat -v threadtime > device_log.txt

# Save app-specific logs to file
adb logcat -v threadtime | grep "MyAppTag" > app_log.txt

# Save logs with a timestamp in filename
adb logcat -v threadtime > "log_$(date +%Y%m%d_%H%M%S).txt"
```

### 4.2 Processing Logs

```bash
# Filter saved logs
cat device_log.txt | grep -i "exception"

# Count occurrences of errors
cat device_log.txt | grep -i "error" | wc -l

# Extract timestamps of errors
cat device_log.txt | grep -i "error" | awk '{print $1, $2}'

# Extract unique error types
cat device_log.txt | grep -i "exception" | sort | uniq -c | sort -nr
```

## 5. Log Viewing Tools

### 5.1 Android Studio Logcat

- Use Android Studio's built-in Logcat viewer
- Apply filters by tag, package name, or process ID
- Set log level filters (Verbose, Debug, Info, Warn, Error, Assert)
- Save filter configurations for quick access
- Use regex patterns for advanced filtering

### 5.2 Pidcat

```bash
# Install pidcat
pip install pidcat

# Use pidcat to filter logs by package
pidcat com.example.myapp
```

### 5.3 Timber Debug Tree

```kotlin
// In your Application class
if (BuildConfig.DEBUG) {
    Timber.plant(Timber.DebugTree())
}
```

## 6. Safe and Efficient Log Checking Practices

### 6.1 Do's

- Set time or line count limits on log commands
- Use specific filters to reduce output volume
- Save logs to files for long-term analysis
- Clear logs before reproducing issues (`adb logcat -c`)
- Use descriptive log tags for easier filtering

### 6.2 Don'ts

- Don't run unbounded logcat commands
- Don't log sensitive data (passwords, tokens, PII)
- Don't leave verbose logging enabled in production
- Don't ignore StrictMode warnings
- Don't overlook system logs related to your app

## 7. Log Management in CI/CD

### 7.1 During CI Testing

```bash
# Capture logs during test execution
./gradlew connectedAndroidTest & PID=$!
adb logcat -v threadtime > test_logs.txt &
wait $PID
kill %2
```

### 7.2 Log Analysis Automation

```bash
# Check for critical errors in test logs
if grep -q "FATAL EXCEPTION" test_logs.txt; then
  echo "Test run contained crashes!"
  exit 1
fi
```

## 8. Special Logging Scenarios

### 8.1 Multi-device Logging

```bash
# List connected devices
adb devices

# Target specific device
adb -s DEVICE_ID logcat

# Monitor multiple devices
for device in $(adb devices | grep -v "List" | awk '{print $1}'); do
  adb -s $device logcat -v threadtime | sed "s/^/[$device] /" &
done
```

### 8.2 Release Build Logging

```bash
# For release builds with Timber
Timber.plant(CrashReportingTree())

class CrashReportingTree : Timber.Tree() {
    override fun log(priority: Int, tag: String?, message: String, t: Throwable?) {
        if (priority >= Log.WARN) {
            // Only log warnings and errors
            FirebaseCrashlytics.getInstance().log("$tag: $message")
            t?.let { FirebaseCrashlytics.getInstance().recordException(it) }
        }
    }
}
```

Remember:
- Always use time limits or line counts for log commands
- Filter logs to focus on relevant information
- Structure your log outputs for readability
- Save logs to files for persistent analysis
- Use appropriate tools for your specific log analysis needs