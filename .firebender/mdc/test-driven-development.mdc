---
description: Standards for Test-Driven Development in Android projects, covering unit testing, integration testing, and UI testing
globs: ["**/*Test.kt", "**/*Test.java", "**/androidTest/**/*.kt", "**/test/**/*.kt"]
---
# Test-Driven Development (TDD) for Android

This document outlines best practices and standards for implementing Test-Driven Development (TDD) in Android projects.

## 1. Core TDD Principles

- **Write Tests First:** Create tests before implementing functionality
- **Red-Green-Refactor:** Start with failing tests, make them pass, then refactor
- **Small Increments:** Work in small, testable increments
- **Complete Coverage:** Aim for comprehensive test coverage of all code paths
- **Maintainable Tests:** Write clear, concise, and maintainable tests

## 2. Testing Workflow

### 2.1 Test-First Process
1. **Understand Requirements:** Clearly define what needs to be implemented
2. **Write Test:** Create a test that verifies the expected behavior
3. **Run Test:** Ensure it fails (Red)
4. **Implement Code:** Write the minimal implementation to make the test pass
5. **Run Test Again:** Verify it passes (Green)
6. **Refactor:** Clean up and optimize both test and implementation code
7. **Run Test Again:** Ensure it still passes after refactoring
8. **Repeat:** Continue with the next requirement

### 2.2 Test Implementation Order
1. **Unit Tests:** Test individual components in isolation
2. **Integration Tests:** Test interactions between components
3. **UI Tests:** Test the complete user experience

## 3. Test Types and Tools

### 3.1 Unit Tests
- **JUnit:** Basic test framework
- **Mockito:** For mocking dependencies
- **MockK:** Kotlin-friendly mocking library
- **Kotest:** Alternative Kotlin-specific testing framework
- **Truth:** For more readable assertions

#### Example Unit Test
```kotlin
@Test
fun `investment calculation returns correct interest`() {
    // Arrange
    val calculator = InvestmentCalculator()
    val initialAmount = 1000.0
    val interestRate = 0.05
    val years = 5
    
    // Act
    val result = calculator.calculateCompoundInterest(initialAmount, interestRate, years)
    
    // Assert
    assertThat(result).isEqualTo(1276.28, tolerance = 0.01)
}
```

### 3.2 ViewModel Tests
- Use `InstantTaskExecutorRule` for LiveData
- Use TestCoroutineDispatcher for coroutines
- Mock repositories and use cases

#### Example ViewModel Test
```kotlin
@get:Rule
val instantTaskExecutorRule = InstantTaskExecutorRule()

@Test
fun `loading state is emitted when fetching investments`() = runTest {
    // Arrange
    val repository = mock<InvestmentRepository>()
    whenever(repository.getInvestments()).thenReturn(flow { 
        emit(Result.Loading) 
        emit(Result.Success(emptyList()))
    })
    val viewModel = InvestmentViewModel(repository)
    
    // Act
    val states = mutableListOf<InvestmentUiState>()
    val job = launch { viewModel.uiState.collect { states.add(it) } }
    
    // Assert
    assertThat(states[0].isLoading).isTrue()
    job.cancel()
}
```

### 3.3 Integration Tests
- Test interactions between real implementations
- Use in-memory databases for Room
- Use fake repositories for network operations

#### Example Integration Test
```kotlin
@Test
fun `investment repository correctly stores and retrieves data from local database`() = runTest {
    // Arrange
    val database = Room.inMemoryDatabaseBuilder(
        ApplicationProvider.getApplicationContext(),
        AppDatabase::class.java
    ).build()
    val dao = database.investmentDao()
    val repository = InvestmentRepositoryImpl(dao, ApiService())
    
    // Act
    repository.saveInvestment(testInvestment)
    val result = repository.getInvestments().first()
    
    // Assert
    assertThat(result).isInstanceOf(Result.Success::class.java)
    assertThat((result as Result.Success).data).contains(testInvestment)
}
```

### 3.4 UI Tests
- **Espresso:** For UI testing
- **Compose Testing:** For Jetpack Compose UI testing
- **Kaspresso:** High-level wrapper over Espresso
- **Barista:** Simplified Espresso API

#### Example Compose UI Test
```kotlin
@get:Rule
val composeTestRule = createComposeRule()

@Test
fun `investment card displays correct information`() {
    // Arrange
    val investment = Investment("Stock XYZ", 1000.0, 1050.0)
    
    // Act
    composeTestRule.setContent {
        InvestmentCard(investment = investment)
    }
    
    // Assert
    composeTestRule.onNodeWithText("Stock XYZ").assertIsDisplayed()
    composeTestRule.onNodeWithText("$1,050.00").assertIsDisplayed()
    composeTestRule.onNodeWithText("+5.0%").assertIsDisplayed()
}
```

## 4. Best Practices

### 4.1 General Best Practices
- **Isolated Tests:** Tests should not depend on each other
- **Single Assertion:** Prefer one assertion per test when possible
- **Descriptive Names:** Use descriptive test method names
- **Test Structure:** Follow the Arrange-Act-Assert pattern
- **Test Data:** Use realistic test data
- **Avoid Logic:** Avoid complex logic in test code

### 4.2 Android-Specific Best Practices
- **TestContext:** Use `ApplicationProvider.getApplicationContext()` for context
- **Idling Resources:** Use idling resources for asynchronous operations in UI tests
- **Test Tagging:** Use test tags in Compose for better test selection
- **Test Fixtures:** Create reusable test fixtures for common data
- **Screen Robots:** Consider using the Robot Pattern for UI tests
- **Screenshot Tests:** Use screenshot tests for visual regression testing

## 5. Handling Common Android Testing Challenges

### 5.1 Asynchronous Operations
- Use `runTest` for coroutines
- Use `InstantTaskExecutorRule` for LiveData
- Set up proper idling resources for Espresso

### 5.2 Dependency Injection
- Use test modules for Dagger/Hilt
- Use test-specific component configurations
- Create test doubles for external dependencies

### 5.3 Database Testing
- Use in-memory databases
- Reset database state between tests
- Create test migrations for database schema changes

### 5.4 Network Testing
- Use MockWebServer for API testing
- Create fake or mock network implementations
- Configure timeout settings appropriately

## 6. Test Coverage Goals

- **Domain Layer:** 90%+ coverage
- **Data Layer:** 80%+ coverage
- **ViewModel Layer:** 80%+ coverage
- **UI Layer:** Critical paths and edge cases

## 7. Test Execution in CI/CD

- Run unit tests on every commit
- Run integration tests on every PR
- Run UI tests nightly or before releases
- Generate and publish coverage reports

By following these TDD practices, your Android project will benefit from improved code quality, better design, fewer regressions, and more maintainable code.