---
description: Standards for creating clear, consistent, and informative git commit messages in Android projects
globs: ["**/.git/**/*"]
source: https://github.com/sanjeed5/awesome-cursor-rules-mdc/blob/main/rules-mdc/git.mdc
version: May 2025
adaptations: Expanded with Android-specific scopes and examples
---
# Git Commit Standards for Android Development

This document outlines best practices for creating clear, consistent, and informative git commit messages in Android projects.

## 1. Commit Message Format

### 1.1 Structure
```
type(scope): subject

body (optional)

footer (optional)
```

### 1.2 Types
- `feat`: A new feature
- `fix`: A bug fix
- `docs`: Documentation only changes
- `style`: Changes that don't affect the code functionality (formatting, etc.)
- `refactor`: Code changes that neither fix bugs nor add features
- `perf`: Performance improvements
- `test`: Adding or correcting tests
- `build`: Changes to the build process or dependencies
- `ci`: Changes to the CI configuration
- `chore`: Other changes that don't modify source or test files

### 1.3 Android-Specific Scopes
- `ui`: UI components, layouts, themes
- `data`: Data layer, repositories, network calls
- `domain`: Domain layer, use cases, business logic
- `viewmodel`: ViewModel components
- `compose`: Jetpack Compose related changes
- `nav`: Navigation components
- `di`: Dependency injection
- `util`: Utility functions
- `db`: Database related changes
- `anim`: Animations
- `res`: Resources (strings, drawables, layouts)
- `gradle`: Build configuration, dependencies
- `manifest`: AndroidManifest.xml changes

## 2. Best Practices

### 2.1 General Guidelines
- Use imperative mood in the subject line ("add", not "added")
- Limit the subject line to 50 characters
- Capitalize the first letter of the subject
- Do not end the subject line with a period
- Separate subject from body with a blank line
- Wrap the body at 72 characters
- Use the body to explain what and why vs. how

### 2.2 Android-Specific Guidelines
- Reference related issue numbers when applicable (`Fixes #123`)
- Mention affected Android versions or API levels if relevant
- Note UI changes with screenshots or animations in the PR, not the commit message
- Tag breaking changes clearly with `BREAKING CHANGE:` in the footer
- Document migration steps for database schema changes

## 3. Examples

```
feat(compose): add investment summary card component

Implement a reusable card component for displaying investment summaries 
using Jetpack Compose. The component supports light/dark mode and adapts 
to different screen sizes.

Closes #45
```

```
fix(data): resolve crash when API returns empty response

Handle empty responses from the investments API properly to prevent 
NullPointerException when parsing JSON data.

Affects API level 24+
```

```
refactor(viewmodel): optimize portfolio data processing

Replace multiple collectAsState calls with a single state object to 
reduce recomposition frequency and improve UI performance.
```

```
build(gradle): update dependencies and target API 34

- Update Kotlin to 1.9.0
- Update Compose to 1.5.0
- Update target SDK to API 34
- Update Room to 2.6.0

BREAKING CHANGE: Requires migration script for Room database
```

## 4. Checking Your Commit

Always review your changes before committing:

```bash
# Check status first
git status

# Review changes in detail
git diff --staged

# Check for unintended changes
git diff
```

## 5. Commit Workflows

### 5.1 Single Commit
```bash
git add .
git commit -m "type(scope): subject"
```

### 5.2 Detailed Commit
```bash
git add .
git commit
# This opens an editor for a multi-line message
```

By following these standards, we maintain a clean, readable, and meaningful git history that helps with code review, debugging, and understanding the project evolution.