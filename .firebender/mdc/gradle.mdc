---
description: Comprehensive rules for Gradle best practices, covering code organization, performance, security, testing, and more. Provides actionable guidelines for efficient build configuration and dependency management.
globs: *.gradle*
---
# Gradle Best Practices

This document outlines best practices for working with Gradle build system in Android projects, covering organization, performance optimization, dependency management, and more.

## Core Principles

- **Use the Gradle Wrapper**: Always use the Gradle wrapper (`gradlew` and `gradlew.bat`) to ensure consistent Gradle versions across different environments.
  - Command: `gradle wrapper` to generate the wrapper files.

- **Organize Build Files**: Maintain a clear structure by separating project-level (`build.gradle` in the root) and module-level (`build.gradle` in each module) configurations.
  - Improves performance by avoiding unnecessary directory searches.
  - Ensures proper project inclusion in multi-module builds.

- **Optimize Build Performance**: Employ several strategies to improve build speed:
  - **Enable parallel builds**: Add `org.gradle.parallel=true` to `gradle.properties`.
  - **Use build caching**: Add `org.gradle.caching=true` to `gradle.properties`.
  - **Configure daemon**: Add `org.gradle.daemon=true` to `gradle.properties` (typically enabled by default).
  - **Minimize dynamic dependencies**: Use fixed versions instead of ranges or `latest.release`.
  - **Configure JVM Memory**: Set appropriate JVM memory in `gradle.properties` like `org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=1g`
  - **Incremental build**: Avoid `gradle clean` unless absolutely necessary to leverage incremental build feature.
  - **Configure task inputs and outputs**: Declare task inputs and outputs properly to enable up-to-date checks and caching.

## Security Practices

- **Storing credentials in `gradle.properties`**: Exclude `gradle.properties` from version control (add it to `.gitignore`).
- **Using environment variables**: Access credentials from environment variables during the build process for CI/CD environments.
- **Avoiding hardcoded secrets**: Never hardcode API keys, passwords, or other sensitive data in build files or source code.

## Build Configuration

- **Dependency Management**: 
   - **Use dependency catalogs**: Define dependencies in a central `libs.versions.toml` file for consistent dependency management across modules.
   - **Avoid dynamic versions**: Always use explicit dependency versions to ensure reproducible builds.
   - **Check for dependency updates**: Use dependency analysis tools to identify outdated dependencies and security vulnerabilities.

- **Separate Source Files**: Organize source files by language (e.g., `src/main/java`, `src/main/kotlin`) and test type (e.g., `src/test/java`, `src/androidTest/java`).
  - Improves readability and maintainability.
  - Enables independent execution of different test types.

- **Use Standard Conventions**: Stick to Gradle's default conventions as much as possible.
  - Simplifies project structure and reduces configuration overhead.
  - Makes it easier for new developers to understand the project.

- **Always Define a Settings File**: Include `settings.gradle` (or `settings.gradle.kts`) in the root directory to avoid performance impacts during project evaluation.
  - Explicitly defines the project name and included subprojects.

- **Use `buildSrc` to Abstract Imperative Logic**: Encapsulate complex build logic in the `buildSrc` directory.
  - `buildSrc` is treated as an included build, automatically compiled and added to the build script classpath.
  - Provides a clean separation of concerns and improves code reusability.
  - Easier to maintain, refactor, and test the code in `buildSrc`.

- **Declare Properties in `gradle.properties` File**: Store build configuration properties in `gradle.properties` rather than in build scripts.
  - Improves build script readability and maintainability.
  - Allows for easy modification of build properties without changing the build script.

## Android-Specific Best Practices

- **Resource Management**: Optimize image resources to reduce APK size. Use vector drawables where possible.
- **Proguard/R8**: Use Proguard (or R8) to shrink and obfuscate code in release builds.
- **APK Analyzer**: Use APK Analyzer to inspect the contents of APK files and identify areas for optimization.
- **Build variants**: Use build variants to create different versions of the app for different purposes (e.g., debug, release, flavor-specific).

- **Kotlin DSL Specific Best Practices**:
  - **Explicit Typing**: Use explicit typing to leverage Kotlin's type safety and improve code readability.
  - **Extension Functions**: Define extension functions to extend the Gradle API and add custom functionality.
  - **Coroutines:** Utilize Kotlin coroutines for asynchronous operations in custom tasks and plugins.

## Common Pitfalls and Gotchas

- **Dependency Conflicts**: Be aware of potential dependency conflicts and use dependency resolution strategies to manage them.
- **Cache Invalidation**: Understand how Gradle's build cache works and how to invalidate it when necessary.
- **Plugin Compatibility**: Ensure compatibility between Gradle versions and plugins. Upgrade plugins carefully.
- **Daemon issues**: The gradle daemon sometime cause unexplainable build errors. Restarting or stopping it can solve some build issues.

## Testing and CI/CD Integration

- **Run Tests in Parallel**: Enable parallel test execution to reduce test execution time:
  - Add `maxParallelForks = <number_of_cores>` to the `test` task configuration in `build.gradle`.

- **Version Your Project**: Use a versioning scheme (e.g., semantic versioning) to track changes and releases.
  - Use plugins like `axion-release` to automate versioning based on Git tags.

- **Continuous Integration (CI):** Integrate JUnit tests into the CI/CD pipeline to automatically run tests on every code commit.
- **Automated Testing:** Automate the execution of JUnit tests as part of the build process.
- **Reporting:** Generate test reports and publish them to the CI/CD system.
- **Failure Notifications:** Configure failure notifications to alert developers when tests fail.

## Additional Resources

- [Gradle Official Documentation](https://docs.gradle.org/)
- [Android Gradle Plugin User Guide](https://developer.android.com/studio/build)
- [Gradle Best Practices Guide](https://guides.gradle.org/performance/)
- [Gradle Kotlin DSL Guide](https://docs.gradle.org/current/userguide/kotlin_dsl.html)