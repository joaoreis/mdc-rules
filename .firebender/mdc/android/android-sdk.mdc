---
description: Comprehensive best practices for Android SDK development covering architecture, performance, security, and testing
globs: ["**/*.kt", "**/*.java", "**/*.gradle", "**/*.gradle.kts"]
source: https://github.com/sanjeed5/awesome-cursor-rules-mdc/blob/main/rules-mdc/android-sdk.mdc
version: May 2025
adaptations: Expanded with additional performance optimization and security guidelines
---
# Android SDK Development Best Practices

This document outlines comprehensive best practices and coding standards for Android SDK development, covering architecture, performance optimization, security, and testing approaches.

## Core Principles

- Always follow platform guidelines and best practices from Google.
- Write clean, maintainable code that follows SOLID principles.
- Ensure backward compatibility when possible, with clear deprecation notices when breaking changes are necessary.
- Prioritize security and privacy in all implementation decisions.
- Consider performance implications, especially for operations on the main thread.
- Design for extensibility and modularity to allow for future growth.

## Performance Optimization

- **UI Thread Management:**
  - Keep the main thread free for UI rendering.
  - Move all network operations, database access, and computationally expensive tasks off the main thread.
  - Use coroutines with appropriate dispatchers for asynchronous operations.

- **Memory Management:**
  - Use efficient data structures (e.g., `SparseArray` instead of `HashMap` for integer keys).
  - Avoid creating unnecessary objects, especially in loops or frequently called methods.
  - Use `StringBuilder` instead of string concatenation for building strings efficiently.
  - Minimize network requests and optimize data transfer using compression and pagination.
  - Analyze app performance using profiling tools (Android Profiler) to identify bottlenecks.
  - Utilize the LeakCanary library to detect memory leaks during development.
  - Use ProGuard or R8 to shrink, obfuscate, and optimize the code for release builds.

- **Memory Management Considerations:**
  - Avoid creating memory leaks by properly managing object lifecycles and releasing resources when they are no longer needed.
  - Use `WeakReference` to hold references to objects that may be garbage collected to prevent memory leaks.
  - Monitor memory usage using the Android Profiler and identify potential memory leaks.

- **Rendering Optimization:**
  - Minimize overdraw by reducing the number of layers that are drawn on top of each other.
  - Use hardware acceleration to improve rendering performance.
  - Optimize custom views by implementing `onDraw()` method efficiently and avoiding unnecessary allocations.

- **Bundle Size Optimization:**
  - Remove unused resources using `shrinkResources` in the Gradle build file.
  - Use vector drawables instead of raster images for icons and other simple graphics.
  - Enable code shrinking and obfuscation using ProGuard or R8.
  - Compress images using tools like TinyPNG or ImageOptim.
  - Use app bundles to deliver optimized APKs for different device configurations.
  - Utilize dynamic feature modules to defer the download of non-essential features.

- **Lazy Loading Strategies:**
  - Implement lazy loading for images and other resources that are not immediately visible on the screen.
  - Use pagination or infinite scrolling to load data in chunks as the user scrolls down the list.

## Security Best Practices

- MUST use Kotlin or Java. Kotlin is RECOMMENDED
- SHOULD use static code analysis, such as detekt or SwiftLint to minimize errors and debates in PRs
- Android: MUST use the Android Support Annotations for public APIs
- Secure API communication and proper permission handling are vital to protect user data
- MUST use a `consumerProguardFiles` file if obfuscation breaks the libraries function
- SHOULD NOT have unnecessary exported dependencies, particularly networking or serialization libraries

- **Common Vulnerabilities and Prevention:**
  - **SQL Injection:** Avoid using raw SQL queries. Use parameterized queries or an ORM like Room to prevent SQL injection attacks.
  - **Cross-Site Scripting (XSS):** Sanitize user input to prevent XSS attacks.
  - **Man-in-the-Middle (MITM) Attacks:** Use HTTPS for all network communication to encrypt data in transit and prevent MITM attacks.
  - **Insecure Data Storage:** Encrypt sensitive data before storing it on the device.
  - **Improper Platform Usage:** Ensure that permissions are properly requested and handled. Review and minimize the permissions your app requests.

- **Input Validation:**
  - Validate all user input on both the client and server sides to prevent malicious data from being processed.
  - Use regular expressions or validation libraries to enforce input constraints.

- **Authentication and Authorization:**
  - Use secure authentication protocols (e.g., OAuth 2.0, OpenID Connect) for user authentication.
  - Implement proper authorization mechanisms to control access to resources based on user roles.
  - Store user credentials securely using hashing and salting.

- **Data Protection:**
  - Encrypt sensitive data at rest using AES or other strong encryption algorithms.
  - Securely transmit data over the network using HTTPS.
  - Implement data masking or anonymization techniques to protect user privacy.

- **Secure API Communication:**
  - Use HTTPS for all API communication.
  - Verify the server's SSL certificate to prevent MITM attacks.
  - Implement API rate limiting to prevent denial-of-service attacks.

## Testing Approaches

- All library (sub-)projects MUST generate coverage test reports (e.g., jacoco)
- Unit test coverage MUST be at least 80% and SHOULD be above 85%
- Unit tests MUST NOT rely on reflection to expose otherwise private/internal classes or members
- Tests SHOULD use JUnit, and MAY use helper libraries such as Mockito or Robolectric

- **Unit Testing Strategies:**
  - Write unit tests for all critical components, including `ViewModels`, repositories, and use cases.
  - Use mocking frameworks (Mockito) to isolate units under test and mock dependencies.
  - Follow the AAA (Arrange, Act, Assert) pattern for writing clear and concise unit tests.

- **Integration Testing Approaches:**
  - Write integration tests to verify the interaction between different components, such as `ViewModels` and repositories.
  - Use dependency injection to provide mock dependencies for integration tests.

- **End-to-End Testing:**
  - Use UI testing frameworks (Espresso, UI Automator) to write end-to-end tests that simulate user interactions.

- **Test Organization:**
  - Organize tests into separate directories based on the type of tests (unit, integration, UI).
  - Use descriptive names for test classes and methods to clearly indicate what is being tested.

- **Mocking and Stubbing:**
  - Use mocking frameworks (Mockito) to create mock objects for dependencies.
  - Use stubbing to define the behavior of mock objects for specific test cases.

## Common Pitfalls and Gotchas

- **Frequent Mistakes:**
  - Not handling configuration changes properly, leading to data loss or unexpected behavior.
  - Performing long-running operations on the main thread, causing the UI to freeze.
  - Leaking `Context` objects, leading to memory leaks.
  - Not properly validating user input, leading to security vulnerabilities.
  - Not handling exceptions properly, leading to app crashes.
  - Overusing `AsyncTask` and not managing thread pools correctly.

- **Edge Cases:**
  - Handling network connectivity issues gracefully.
  - Managing different screen sizes and densities.
  - Dealing with low-memory conditions.
  - Handling background tasks properly to avoid ANRs (Application Not Responding).
  - Handling different Android versions and API levels.

- **Version-Specific Issues:**
  - Be aware of API level differences and use `@TargetApi` and `@RequiresApi` annotations to handle them correctly.
  - Test your app on different Android versions to ensure compatibility.

- **Compatibility Concerns:**
  - Ensure compatibility with different device manufacturers and hardware configurations.
  - Test your app on different screen sizes and densities.

- **Debugging Strategies:**
  - Use the Android Debug Bridge (ADB) to connect to devices and emulators for debugging.
  - Use the Android Profiler to analyze app performance and identify bottlenecks.
  - Use logging statements to track the flow of execution and identify errors.
  - Use the debugger to step through the code and inspect variables.

## Tooling and Environment

- **Recommended Tools:**
  - Android Studio: The official IDE for Android development.
  - Gradle: The build system for Android projects.
  - ADB (Android Debug Bridge): A command-line tool for communicating with Android devices and emulators.
  - Android Profiler: A tool for analyzing app performance.
  - LeakCanary: A library for detecting memory leaks.
  - Timber: A logging library for Android.

- **Build Configuration:**
  - MUST use gradle with gradle wrapper to build Android library or Java library
  - MUST have consistent minSdk and supportLib versions with other SDKs
  - SHOULD use shared build configuration for consistent version with other SDKs/libraries
  - SHOULD use latest versions of Android X libraries (if required)
  
  - Configure build variants for different environments (debug, release, staging).
  - Use ProGuard or R8 to shrink, obfuscate, and optimize the code for release builds.
  - Configure signing configurations to sign the APK for distribution.

- **Linting and Formatting:**
  - Enforce code style guidelines using lint and code formatters (e.g., ktlint for Kotlin).
  - Configure lint to run automatically during the build process.
  - Resolve lint warnings and errors to improve code quality.

- **Deployment:**
  - Publish libraries to a Maven repository (Maven Central or a private repository).
  - Deploy apps to the Google Play Store.
  - Implement beta testing using Google Play Console.

- **CI/CD Integration:**
  - Integrate the build process with a CI/CD system (e.g., Jenkins, CircleCI, GitHub Actions).
  - Automate testing, linting, and code formatting as part of the CI/CD pipeline.
  - Automate deployment to the Google Play Store.

## Additional Considerations
- Limit impact on consumers. SHOULD limit dependencies as much as possible primarily due to risk of version clashes
- RECOMMENDED not to have any exported dependency on other SDK modules
- Expose minimal Surface area. Keep everything private unless it needs to be public.
- MUST hide classes from generated API documentation that are required to be public solely for technical reasons
- SHOULD declare classes as final to avoid unexpected high-jacking of SDK behavior by subclasses
- For better testability of your library it is RECOMMENDED to use dependency injection
- MUST follow Semantic Versioning
- MUST tag source control management revision/commit that is published