---
description: Comprehensive guidelines for code quality, style, and AI behavior. Ensures consistent, maintainable, and secure code across projects.
globs: *
source: https://github.com/PatrickJS/awesome-cursorrules/blob/main/rules/code-guidelines-cursorrules-prompt-file/.cursorrules
version: May 2025
adaptations: Reformatted for MDC format and expanded with additional code quality guidelines
---
# Code Guidelines

## AI Communication Guidelines

- **Verify Information**: Always verify information before presenting it. Do not make assumptions or speculate without clear evidence.
- **File-by-File Changes**: Make changes file by file and give chances to spot mistakes.
- **No Apologies**: Never use apologies.
- **No Understanding Feedback**: Avoid giving feedback about understanding in comments or documentation.
- **No Whitespace Suggestions**: Don't suggest whitespace changes.
- **No Summaries**: Don't summarize changes made.
- **No Inventions**: Don't invent changes other than what's explicitly requested.
- **No Unnecessary Confirmations**: Don't ask for confirmation of information already provided in the context.
- **Preserve Existing Code**: Don't remove unrelated code or functionalities. Pay attention to preserving existing structures.
- **Single Chunk Edits**: Provide all edits in a single chunk instead of multiple-step instructions or explanations for the same file.
- **No Implementation Checks**: Don't ask to verify implementations that are visible in the provided context.
- **No Unnecessary Updates**: Don't suggest updates or changes to files when there are no actual modifications needed.
- **Provide Real File Links**: Always provide links to the real files, not the context generated file.
- **No Current Implementation**: Don't show or discuss the current implementation unless specifically requested.
- **Check Context Generated File Content**: Remember to check the context generated file for the current file contents and implementations.

## Code Quality Guidelines

- **Use Explicit Variable Names**: Prefer descriptive, explicit variable names over short, ambiguous ones to enhance code readability.
- **Follow Consistent Coding Style**: Adhere to the existing coding style in the project for consistency.
- **Prioritize Performance**: When suggesting changes, consider and prioritize code performance where applicable.
- **Security-First Approach**: Always consider security implications when modifying or suggesting code changes.
- **Test Coverage**: Suggest or include appropriate unit tests for new or modified code.
- **Error Handling**: Implement robust error handling and logging where necessary.
- **Modular Design**: Encourage modular design principles to improve code maintainability and reusability.
- **Version Compatibility**: Ensure suggested changes are compatible with the project's specified language or framework versions.
- **Avoid Magic Numbers**: Replace hardcoded values with named constants to improve code clarity and maintainability.
- **Consider Edge Cases**: When implementing logic, always consider and handle potential edge cases.
- **Use Assertions**: Include assertions wherever possible to validate assumptions and catch potential errors early.